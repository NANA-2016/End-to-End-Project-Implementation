pipeline {
    agent any

    environment {
        ANSIBLE_CONFIG = "${WORKSPACE}/deploy/ansible.cfg"
    }

    stages {
        stage("Initial CleanUp") {
            steps {
                dir("${WORKSPACE}") {
                    deleteDir()
                }
            }
        }

        stage('Checkout SCM') {
            steps {
                git branch: 'main', url: 'https://github.com/NANA-2016/End-to-End-Project-Implementation.git'
            }
        }

        stage('Verify Checkout') {
            steps {
                sh 'echo "Listing contents of ${WORKSPACE}/deploy:"'
                sh 'ls -la ${WORKSPACE}/deploy'
            }
        }

        stage('Prepare Ansible for Execution') {
            steps {
                script {
                    def ansibleConfigPath = "${WORKSPACE}/deploy/ansible.cfg"
                    // Verify the ansible.cfg file exists
                    if (fileExists(ansibleConfigPath)) {
                        sh "sed -i '3 a role_path=${WORKSPACE}/roles' ${ansibleConfigPath}"
                        sh "echo 'Updated ansible.cfg:'"
                        sh "cat ${ansibleConfigPath}"
                    } else {
                        error "ansible.cfg file not found at ${ansibleConfigPath}"
                    }
                }
            }
        }

        stage('Run Ansible playbook') {
            steps {
                ansiblePlaybook(
                    become: true,
                    colorized: true,
                    credentialsId: 'NANA2016',
                    disableHostKeyChecking: true,
                    installation: 'Ansible',
                    inventory: 'inventory/dev',
                    playbook: 'playbooks/site.yml',
                    vaultCredentialsId: ''
                )
            }
        }

        stage('Clean workspace after build') {
            steps {
                cleanWs(
                    cleanWhenAborted: true,
                    cleanWhenFailure: true,
                    cleanWhenNotBuilt: true,
                    cleanWhenUnstable: true,
                    deleteDirs: true
                )
            }
        }
    }
}
